buildscript {
    repositories {
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.8")
        classpath("me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1")
    }
}

configure(allprojects) {
    group = "org.springframework.social"

    ext.h2Version               = "1.3.175"
    ext.hamcrestVersion         = "1.3"
    ext.httpComponentsVersion   = "4.3.2"
    ext.jacksonVersion          = "2.3.1"
    ext.javaxInjectVersion      = "1"
    ext.junitVersion            = "4.11"
    ext.mockitoVersion          = "1.9.5"
    ext.servletApiVersion       = "3.0.1"
    ext.springVersion           = "4.0.3.DEPENDENCIES"
    ext.springReleaseVersion    = "latest.release"
    ext.springSnapshotVersion   = "latest.integration"
    ext.springSecurityVersion   = "4.0.0.DEPENDENCIES"
    ext.thymeleafVersion        = "2.1.2.RELEASE"
    ext.jspApiVersion           = "2.2.1"

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "javadocHotfix"

    compileJava {
        sourceCompatibility=1.5
        targetCompatibility=1.5
    }
    compileTestJava {
        sourceCompatibility=1.7
        targetCompatibility=1.7
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = [
        "-Xlint:serial",
        "-Xlint:varargs",
        "-Xlint:cast",
        "-Xlint:classfile",
        "-Xlint:dep-ann",
        "-Xlint:divzero",
        "-Xlint:empty",
        "-Xlint:finally",
        "-Xlint:overrides",
        "-Xlint:path",
        "-Xlint:processing",
        "-Xlint:static",
        "-Xlint:try",
        "-Xlint:-options",     // intentionally disabled
        "-Xlint:-fallthrough", // intentionally disabled
        "-Xlint:rawtypes",
        "-Xlint:deprecation",
        "-Xlint:unchecked"
    ]

    sourceSets.test.resources.srcDirs = [
        "src/test/resources",
        "src/test/java"
    ]

    test.systemProperty("java.awt.headless", "true")

    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }

    dependencies {
        testCompile("org.springframework:spring-test:${springVersion}")
        testCompile("junit:junit-dep:${junitVersion}")
        testCompile("org.hamcrest:hamcrest-library:${hamcrestVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}")
    }

    // servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
    // exported to dependent projects in Eclipse to avoid false compilation errors due
    // to changing APIs across these versions
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.path.contains("servlet-api") }*.exported = false
    }
}

ext.javadocLinks = [
    "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector"
] as String[]

configure(subprojects) { subproject ->
    apply from: "${rootProject.projectDir}/publish-maven.gradle"

    jar {
        manifest.attributes["Implementation-Title"] = subproject.name
        manifest.attributes["Implementation-Version"] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        //options.overview = "${projectDir}/src/main/java/overview.html"
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    configurations {
        springReleaseTestRuntime.extendsFrom testRuntime
        springSnapshotTestRuntime.extendsFrom testRuntime
    }

    // Test against latest Spring Framework release
    configurations.springReleaseTestRuntime {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework') {
                details.useVersion springReleaseVersion
            }
        }
    }

    // Test against latest Spring Framework snapshot
    configurations.springSnapshotTestRuntime {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework') {
                details.useVersion springSnapshotVersion
            }
        }
    }

    task springReleaseTest(type: Test) {
        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime
        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/"))
        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/"))
    }
    check.dependsOn springReleaseTest

    task springSnapshotTest(type: Test) {
        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springSnapshotTestRuntime
        getReports().getJunitXml().setDestination(file("$buildDir/spring-snapshot-test-results/"))
        getReports().getHtml().setDestination(file("$buildDir/reports/spring-snapshot-tests/"))
    }
    check.dependsOn springSnapshotTest

    configure([test, springReleaseTest, springSnapshotTest]) {
        systemProperties['springVersion'] = springVersion
    }
}


project("spring-social-core") {
    description = "Foundational module containing the ServiceProvider Connect Framework and Service API invocation support."
    dependencies {
        compile("org.springframework:spring-jdbc:$springVersion", optional)
        compile("org.springframework:spring-web:$springVersion")
        compile("org.springframework.security:spring-security-crypto:$springSecurityVersion", optional)
        compile("org.apache.httpcomponents:httpclient:$httpComponentsVersion", optional)
        testCompile("com.h2database:h2:$h2Version")
        testCompile("org.springframework:spring-test:$springVersion")
        testCompile("javax.servlet:javax.servlet-api:$servletApiVersion", provided)
        testCompile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    }
}

project("spring-social-web") {
    description = "Spring Web Integration"
    dependencies {
        compile project(":spring-social-core")
        compile("javax.inject:javax.inject:$javaxInjectVersion")
        compile("org.springframework:spring-web:$springVersion")
        compile("org.springframework:spring-webmvc:$springVersion")
        compile("javax.servlet:javax.servlet-api:$servletApiVersion", provided)
        compile("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion", provided)
        compile("org.thymeleaf:thymeleaf:$thymeleafVersion", optional)
        compile("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional)
        compile("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional)
        testCompile("org.springframework:spring-test:$springVersion")
        testCompile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    }
    metaInf << files("src/main/resources/tld/spring-social.tld")
}

project("spring-social-config") {
    description = "Spring Social Config"
    dependencies {
      compile project(":spring-social-core")
      compile project(":spring-social-security"), optional
      compile project(":spring-social-web")
      compile("org.springframework.security:spring-security-core:$springSecurityVersion", optional)
      testCompile("javax.servlet:javax.servlet-api:$servletApiVersion", provided)
      testCompile("com.h2database:h2:$h2Version")
      testCompile("org.springframework:spring-jdbc:$springVersion")
    }
}

project("spring-social-security") {
    description = "Spring Security Integration"
    dependencies {
        compile project(":spring-social-core")
        compile project(":spring-social-web")
        compile("org.springframework:spring-web:$springVersion")
        compile("org.springframework:spring-webmvc:$springVersion")
        compile("org.springframework.security:spring-security-config:$springSecurityVersion", optional)
        compile("org.springframework.security:spring-security-web:$springSecurityVersion")
        compile("javax.servlet:javax.servlet-api:$servletApiVersion", provided)
    }
}

configure(rootProject) {
    description = "Spring Social"

    apply plugin: "docbook-reference"

    reference {
        ext.sourceDir = file("src/reference/docbook")
    }

    // don"t publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies { // for integration tests
    }

    task api(type: Javadoc) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API documentation."
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = "src/api/overview.html"
        options.links(project.ext.javadocLinks)

        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }

        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })

        maxMemory = "1024m"
        destinationDir = new File(buildDir, "api")
    }

    task docsZip(type: Zip) {
        group = "Distribution"
        classifier = "docs"
        description = "Builds -${classifier} archive containing api and reference " +
            "for deployment at static.springframework.org/spring-social/docs."

        from("src/dist") {
            include "changelog.txt"
        }

        from (api) {
            into "api"
        }

        from (reference) {
            into "reference"
        }
    }

    task schemaZip(type: Zip) {
        group = "Distribution"
        classifier = "schema"
        description = "Builds -${classifier} archive containing all " +
            "XSDs for deployment at static.springframework.org/schema."

        subprojects.each { subproject ->
            def Properties schemas = new Properties();

            subproject.sourceSets.main.resources.find {
                it.path.endsWith("META-INF/spring.schemas")
            }?.withInputStream { schemas.load(it) }

            for (def key : schemas.keySet()) {
                def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
                assert shortName != key
                File xsdFile = subproject.sourceSets.main.resources.find {
                    it.path.endsWith(schemas.get(key))
                }
                assert xsdFile != null
                into (shortName) {
                    from xsdFile.path
                }
            }
        }
    }

    task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
        group = "Distribution"
        classifier = "dist"
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                      "suitable for community download page."

        ext.baseDir = "${project.name}-${project.version}";

        from("src/dist") {
            include "readme.txt"
            include "license.txt"
            include "notice.txt"
            into "${baseDir}"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        from(zipTree(schemaZip.archivePath)) {
            into "${baseDir}/schema"
        }

        subprojects.each { subproject ->
            into ("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath("sourcesJar")) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath("javadocJar")) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives schemaZip
        archives distZip
    }

    task wrapper(type: Wrapper) {
        gradleVersion = "1.11"
    }

}

task updateRootDocs << {
    copy {
        from "src/dist"
        into "${rootProject.projectDir}"
        include "notice.txt"
        expand(copyright: new Date().format("yyyy"), version: project.version)
        rename { filename -> "NOTICE" }
    }

    copy {
        from "src/dist"
        into "${rootProject.projectDir}"
        include "license.txt"
        rename { filename -> "LICENSE" }
    }
}

build.dependsOn("updateRootDocs")
